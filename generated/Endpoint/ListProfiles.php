<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\AmznAdvertisingProfilesApi\Generated\Endpoint;

class ListProfiles extends \CedricZiel\AmznAdvertisingProfilesApi\Generated\Runtime\Client\BaseEndpoint implements \CedricZiel\AmznAdvertisingProfilesApi\Generated\Runtime\Client\Endpoint
{
    use \CedricZiel\AmznAdvertisingProfilesApi\Generated\Runtime\Client\EndpointTrait;

    /**
     * Note that this operation does not return a response unless the current account has created at least one campaign using the advertising console.
     *
     * @param array $queryParameters {
     *
     * @var string $apiProgram Filters response to include profiles that have permissions for the specified Advertising API program only. Setting `apiProgram=billing` filters the response to include only profiles to which the user and application associated with the access token have permission to view or edit billing information.
     * @var string $accessLevel Filters response to include profiles that have specified permissions for the specified Advertising API program only. Currently, the only supported access level is `view` and `edit`. Setting `accessLevel=view` filters the response to include only profiles to which the user and application associated with the access token have view permission to the provided api program.
     * @var string $profileTypeFilter Filters response to include profiles that are of the specified types in the comma-delimited list. Default is all types. Note that this filter performs an inclusive AND operation on the types.
     * @var string $validPaymentMethodFilter Filter response to include profiles that have valid payment methods. Default is to include all profiles. Setting this filter to `true` returns only profiles with either no `validPaymentMethod` field, or the `validPaymentMethod` field set to `true`.  Setting this to `false` returns profiles with the `validPaymentMethod` field set to `false` only.
     *             }
     *
     * @param array $headerParameters {
     *
     * @var string $Amazon-Advertising-API-ClientId The identifier of a client associated with a "Login with Amazon" account.
     *             }
     */
    public function __construct(array $queryParameters = [], array $headerParameters = [])
    {
        $this->queryParameters = $queryParameters;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/v2/profiles';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['apiProgram', 'accessLevel', 'profileTypeFilter', 'validPaymentMethodFilter']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults(['apiProgram' => 'campaign', 'accessLevel' => 'edit']);
        $optionsResolver->addAllowedTypes('apiProgram', ['string']);
        $optionsResolver->addAllowedTypes('accessLevel', ['string']);
        $optionsResolver->addAllowedTypes('profileTypeFilter', ['string']);
        $optionsResolver->addAllowedTypes('validPaymentMethodFilter', ['string']);

        return $optionsResolver;
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['Amazon-Advertising-API-ClientId']);
        $optionsResolver->setRequired(['Amazon-Advertising-API-ClientId']);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('Amazon-Advertising-API-ClientId', ['string']);

        return $optionsResolver;
    }

    /**
     * @return \CedricZiel\AmznAdvertisingProfilesApi\Generated\Model\Profile[]|null
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (false === is_null($contentType) && (200 === $status && false !== mb_strpos($contentType, 'application/json'))) {
            return $serializer->deserialize($body, 'CedricZiel\AmznAdvertisingProfilesApi\Generated\Model\Profile[]', 'json');
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['oauth2AuthorizationCode', 'bearerAuth'];
    }
}
