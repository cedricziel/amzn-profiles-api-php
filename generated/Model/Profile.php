<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\AmznAdvertisingProfilesApi\Generated\Model;

class Profile extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $profileId;
    /**
     * The countryCode for a given country
     * |Region|`countryCode`|Country Name|
     * |------|-----|-------|
     * |NA|BR|Brazil|
     * |NA|CA|Canada|
     * |NA|MX|Mexico|
     * |NA|US|United States|
     * |EU|AE|United Arab Emirates|
     * |EU|BE|Belgium|
     * |EU|DE|Germany|
     * |EU|EG|Egypt|
     * |EU|ES|Spain|
     * |EU|FR|France|
     * |EU|IN|India|
     * |EU|IT|Italy|
     * |EU|NL|The Netherlands|
     * |EU|PL|Poland|
     * |EU|SA|Saudi Arabia|
     * |EU|SE|Sweden|
     * |EU|TR|Turkey|
     * |EU|UK|United Kingdom|
     * |EU|ZA| South Africa |
     * |FE|AU|Australia|
     * |FE|JP|Japan|
     * |FE|SG|Singapore|.
     *
     * @var string
     */
    protected $countryCode;
    /**
     * The currency used for all monetary values for entities under this profile.
     * |Region|`countryCode`|Country Name|`currencyCode`|
     * |-----|------|------|------|
     * |NA|BR|Brazil|BRL|
     * |NA|CA|Canada|CAD|
     * |NA|MX|Mexico|MXN|
     * |NA|US|United States|USD|
     * |EU|AE|United Arab Emirates|AED|
     * |EU|BE|Belgium|EUR|
     * |EU|DE|Germany|EUR|
     * |EU|EG|Egypt|EGP|
     * |EU|ES|Spain|EUR|
     * |EU|FR|France|EUR|
     * |EU|IN|India|INR|
     * |EU|IT|Italy|EUR|
     * |EU|NL|The Netherlands|EUR|
     * |EU|PL|Poland|PLN|
     * |EU|SA|Saudi Arabia|SAR|
     * |EU|SE|Sweden|SEK|
     * |EU|TR|Turkey|TRY|
     * |EU|UK|United Kingdom|GBP|
     * |EU|ZA| South Africa | ZAR|
     * |FE|AU|Australia|AUD|
     * |FE|JP|Japan|JPY|
     * |FE|SG|Singapore|SGD|.
     *
     * @var string
     */
    protected $currencyCode;
    /**
     * Note that this field applies to Sponsored Product campaigns for seller type accounts only. Not supported for vendor type accounts.
     *
     * @var float
     */
    protected $dailyBudget;
    /**
     * The time zone used for all date-based campaign management and reporting.
     * |Region|`countryCode`|Country Name|`timezone`|
     * |------|-----|-----|------|
     * |NA|BR|Brazil|America/Sao_Paulo|
     * |NA|CA|Canada|America/Los_Angeles|
     * |NA|MX|Mexico|America/Los_Angeles|
     * |NA|US|United States|America/Los_Angeles|
     * |EU|AE|United Arab Emirates|Asia/Dubai|
     * |EU|BE|Belgium|Europe/Brussels|
     * |EU|DE|Germany|Europe/Paris|
     * |EU|EG|Egypt|Africa/Cairo|
     * |EU|ES|Spain|Europe/Paris|
     * |EU|FR|France|Europe/Paris|
     * |EU|IN|India|Asia/Kolkata|
     * |EU|IT|Italy|Europe/Paris|
     * |EU|NL|The Netherlands|Europe/Amsterdam|
     * |EU|PL|Poland|Europe/Warsaw|
     * |EU|SA|Saudi Arabia|Asia/Riyadh|
     * |EU|SE|Sweden|Europe/Stockholm|
     * |EU|TR|Turkey|Europe/Istanbul|
     * |EU|UK|United Kingdom|Europe/London|
     * |EU|ZA| South Africa | Africa/Johannesburg |
     * |FE|AU|Australia|Australia/Sydney|
     * |FE|JP|Japan|Asia/Tokyo|
     * |FE|SG|Singapore|Asia/Singapore|.
     *
     * @var string
     */
    protected $timezone;
    /**
     * @var AccountInfo
     */
    protected $accountInfo;

    public function getProfileId(): int
    {
        return $this->profileId;
    }

    public function setProfileId(int $profileId): self
    {
        $this->initialized['profileId'] = true;
        $this->profileId = $profileId;

        return $this;
    }

    /**
     * The countryCode for a given country
     * |Region|`countryCode`|Country Name|
     * |------|-----|-------|
     * |NA|BR|Brazil|
     * |NA|CA|Canada|
     * |NA|MX|Mexico|
     * |NA|US|United States|
     * |EU|AE|United Arab Emirates|
     * |EU|BE|Belgium|
     * |EU|DE|Germany|
     * |EU|EG|Egypt|
     * |EU|ES|Spain|
     * |EU|FR|France|
     * |EU|IN|India|
     * |EU|IT|Italy|
     * |EU|NL|The Netherlands|
     * |EU|PL|Poland|
     * |EU|SA|Saudi Arabia|
     * |EU|SE|Sweden|
     * |EU|TR|Turkey|
     * |EU|UK|United Kingdom|
     * |EU|ZA| South Africa |
     * |FE|AU|Australia|
     * |FE|JP|Japan|
     * |FE|SG|Singapore|.
     */
    public function getCountryCode(): string
    {
        return $this->countryCode;
    }

    /**
     * The countryCode for a given country
     * |Region|`countryCode`|Country Name|
     * |------|-----|-------|
     * |NA|BR|Brazil|
     * |NA|CA|Canada|
     * |NA|MX|Mexico|
     * |NA|US|United States|
     * |EU|AE|United Arab Emirates|
     * |EU|BE|Belgium|
     * |EU|DE|Germany|
     * |EU|EG|Egypt|
     * |EU|ES|Spain|
     * |EU|FR|France|
     * |EU|IN|India|
     * |EU|IT|Italy|
     * |EU|NL|The Netherlands|
     * |EU|PL|Poland|
     * |EU|SA|Saudi Arabia|
     * |EU|SE|Sweden|
     * |EU|TR|Turkey|
     * |EU|UK|United Kingdom|
     * |EU|ZA| South Africa |
     * |FE|AU|Australia|
     * |FE|JP|Japan|
     * |FE|SG|Singapore|.
     */
    public function setCountryCode(string $countryCode): self
    {
        $this->initialized['countryCode'] = true;
        $this->countryCode = $countryCode;

        return $this;
    }

    /**
     * The currency used for all monetary values for entities under this profile.
     * |Region|`countryCode`|Country Name|`currencyCode`|
     * |-----|------|------|------|
     * |NA|BR|Brazil|BRL|
     * |NA|CA|Canada|CAD|
     * |NA|MX|Mexico|MXN|
     * |NA|US|United States|USD|
     * |EU|AE|United Arab Emirates|AED|
     * |EU|BE|Belgium|EUR|
     * |EU|DE|Germany|EUR|
     * |EU|EG|Egypt|EGP|
     * |EU|ES|Spain|EUR|
     * |EU|FR|France|EUR|
     * |EU|IN|India|INR|
     * |EU|IT|Italy|EUR|
     * |EU|NL|The Netherlands|EUR|
     * |EU|PL|Poland|PLN|
     * |EU|SA|Saudi Arabia|SAR|
     * |EU|SE|Sweden|SEK|
     * |EU|TR|Turkey|TRY|
     * |EU|UK|United Kingdom|GBP|
     * |EU|ZA| South Africa | ZAR|
     * |FE|AU|Australia|AUD|
     * |FE|JP|Japan|JPY|
     * |FE|SG|Singapore|SGD|.
     */
    public function getCurrencyCode(): string
    {
        return $this->currencyCode;
    }

    /**
     * The currency used for all monetary values for entities under this profile.
     * |Region|`countryCode`|Country Name|`currencyCode`|
     * |-----|------|------|------|
     * |NA|BR|Brazil|BRL|
     * |NA|CA|Canada|CAD|
     * |NA|MX|Mexico|MXN|
     * |NA|US|United States|USD|
     * |EU|AE|United Arab Emirates|AED|
     * |EU|BE|Belgium|EUR|
     * |EU|DE|Germany|EUR|
     * |EU|EG|Egypt|EGP|
     * |EU|ES|Spain|EUR|
     * |EU|FR|France|EUR|
     * |EU|IN|India|INR|
     * |EU|IT|Italy|EUR|
     * |EU|NL|The Netherlands|EUR|
     * |EU|PL|Poland|PLN|
     * |EU|SA|Saudi Arabia|SAR|
     * |EU|SE|Sweden|SEK|
     * |EU|TR|Turkey|TRY|
     * |EU|UK|United Kingdom|GBP|
     * |EU|ZA| South Africa | ZAR|
     * |FE|AU|Australia|AUD|
     * |FE|JP|Japan|JPY|
     * |FE|SG|Singapore|SGD|.
     */
    public function setCurrencyCode(string $currencyCode): self
    {
        $this->initialized['currencyCode'] = true;
        $this->currencyCode = $currencyCode;

        return $this;
    }

    /**
     * Note that this field applies to Sponsored Product campaigns for seller type accounts only. Not supported for vendor type accounts.
     */
    public function getDailyBudget(): float
    {
        return $this->dailyBudget;
    }

    /**
     * Note that this field applies to Sponsored Product campaigns for seller type accounts only. Not supported for vendor type accounts.
     */
    public function setDailyBudget(float $dailyBudget): self
    {
        $this->initialized['dailyBudget'] = true;
        $this->dailyBudget = $dailyBudget;

        return $this;
    }

    /**
     * The time zone used for all date-based campaign management and reporting.
     * |Region|`countryCode`|Country Name|`timezone`|
     * |------|-----|-----|------|
     * |NA|BR|Brazil|America/Sao_Paulo|
     * |NA|CA|Canada|America/Los_Angeles|
     * |NA|MX|Mexico|America/Los_Angeles|
     * |NA|US|United States|America/Los_Angeles|
     * |EU|AE|United Arab Emirates|Asia/Dubai|
     * |EU|BE|Belgium|Europe/Brussels|
     * |EU|DE|Germany|Europe/Paris|
     * |EU|EG|Egypt|Africa/Cairo|
     * |EU|ES|Spain|Europe/Paris|
     * |EU|FR|France|Europe/Paris|
     * |EU|IN|India|Asia/Kolkata|
     * |EU|IT|Italy|Europe/Paris|
     * |EU|NL|The Netherlands|Europe/Amsterdam|
     * |EU|PL|Poland|Europe/Warsaw|
     * |EU|SA|Saudi Arabia|Asia/Riyadh|
     * |EU|SE|Sweden|Europe/Stockholm|
     * |EU|TR|Turkey|Europe/Istanbul|
     * |EU|UK|United Kingdom|Europe/London|
     * |EU|ZA| South Africa | Africa/Johannesburg |
     * |FE|AU|Australia|Australia/Sydney|
     * |FE|JP|Japan|Asia/Tokyo|
     * |FE|SG|Singapore|Asia/Singapore|.
     */
    public function getTimezone(): string
    {
        return $this->timezone;
    }

    /**
     * The time zone used for all date-based campaign management and reporting.
     * |Region|`countryCode`|Country Name|`timezone`|
     * |------|-----|-----|------|
     * |NA|BR|Brazil|America/Sao_Paulo|
     * |NA|CA|Canada|America/Los_Angeles|
     * |NA|MX|Mexico|America/Los_Angeles|
     * |NA|US|United States|America/Los_Angeles|
     * |EU|AE|United Arab Emirates|Asia/Dubai|
     * |EU|BE|Belgium|Europe/Brussels|
     * |EU|DE|Germany|Europe/Paris|
     * |EU|EG|Egypt|Africa/Cairo|
     * |EU|ES|Spain|Europe/Paris|
     * |EU|FR|France|Europe/Paris|
     * |EU|IN|India|Asia/Kolkata|
     * |EU|IT|Italy|Europe/Paris|
     * |EU|NL|The Netherlands|Europe/Amsterdam|
     * |EU|PL|Poland|Europe/Warsaw|
     * |EU|SA|Saudi Arabia|Asia/Riyadh|
     * |EU|SE|Sweden|Europe/Stockholm|
     * |EU|TR|Turkey|Europe/Istanbul|
     * |EU|UK|United Kingdom|Europe/London|
     * |EU|ZA| South Africa | Africa/Johannesburg |
     * |FE|AU|Australia|Australia/Sydney|
     * |FE|JP|Japan|Asia/Tokyo|
     * |FE|SG|Singapore|Asia/Singapore|.
     */
    public function setTimezone(string $timezone): self
    {
        $this->initialized['timezone'] = true;
        $this->timezone = $timezone;

        return $this;
    }

    public function getAccountInfo(): AccountInfo
    {
        return $this->accountInfo;
    }

    public function setAccountInfo(AccountInfo $accountInfo): self
    {
        $this->initialized['accountInfo'] = true;
        $this->accountInfo = $accountInfo;

        return $this;
    }
}
